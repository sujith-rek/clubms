generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String
  description      String             @default("")
  rollNo           String             @default("")
  role             Role               @default(STUDENT)
  Eventapproval    Eventapproval[]
  RoomBookApproval RoomBookApproval[]
  events           Event[]
}

// model Admin {
//   id               Int                @id @default(autoincrement())
//   email            String             @unique
//   password         String
//   name             String
//   role             String
//   Eventapproval    Eventapproval[]
//   RoomBookApproval RoomBookApproval[]
// }

// model Club {
//   id               Int                @id @default(autoincrement())
//   name             String
//   email            String             @unique
//   password         String
//   description      String             @default("")
//   events           Event[]
//   RoomBookApproval RoomBookApproval[]
// }

// model Student {
//   id       Int    @id @default(autoincrement())
//   name     String
//   email    String @unique
//   password String
//   rollNo   String
// }

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  date          DateTime
  venue         String
  clubId        Int
  Eventapproval Eventapproval?
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
}

model Eventapproval {
  id          Int    @id @default(autoincrement())
  eventId     Int    @unique
  adminId     Int    @default(1)
  adminStatus Status @default(PENDING)
  ccId        Int    @default(1)
  ccStatus    Status @default(PENDING)
  event       Event  @relation(fields: [eventId], references: [id])
  User        User?  @relation(fields: [userId], references: [id])
  userId      Int?
}

model RoomBookApproval {
  id          Int      @id @default(autoincrement())
  roomId      Int      @default(1)
  adminId     Int      @default(1)
  from        DateTime
  to          DateTime
  adminStatus Status   @default(PENDING)
  date        DateTime @default(now())
  clubId      Int      @default(1)
  description String
  room        Room     @relation(fields: [roomId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Room {
  id               Int                @id @default(autoincrement())
  capacity         Int
  roomNumber       Int
  roomBlock        Block
  roomBookApproval RoomBookApproval[]
}

// model CC {
//   id            Int             @id @default(autoincrement())
//   name          String
//   email         String          @unique
//   password      String
//   Eventapproval Eventapproval[]
// }

enum Role {
  ADMIN
  STUDENT
  CLUB
  CC
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

enum Block {
  A_BLOCK
  B_BLOCK
  C_BLOCK
  D_BLOCK
}
